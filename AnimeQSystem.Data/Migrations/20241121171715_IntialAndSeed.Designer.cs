// <auto-generated />
using System;
using AnimeQSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnimeQSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241121171715_IntialAndSeed")]
    partial class IntialAndSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Anime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Episodes")
                        .HasColumnType("int");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Seasons")
                        .HasColumnType("int");

                    b.Property<bool>("StillOngoing")
                        .HasColumnType("bit");

                    b.Property<Guid>("StudioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("StudioId");

                    b.HasIndex("WriterId");

                    b.ToTable("Animes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9d68329-bb49-4075-850d-2da01083f6b5"),
                            Episodes = 1,
                            GenreId = new Guid("bf17fef6-72a7-41fc-9a9b-5251123b02a0"),
                            Rating = 5,
                            ReleaseDate = new DateTime(2001, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seasons = 1,
                            StillOngoing = false,
                            StudioId = new Guid("22354271-34e8-42e8-bd32-640f8853d975"),
                            Title = "Spirited Away",
                            WriterId = new Guid("bcd3f42d-b7fb-4157-9f82-333f17f5d2ed")
                        },
                        new
                        {
                            Id = new Guid("b1ef98c2-eac2-471f-9506-16e213138f64"),
                            Episodes = 1,
                            GenreId = new Guid("d613b8c3-6023-4538-8727-9e01403b0a66"),
                            Rating = 4,
                            ReleaseDate = new DateTime(2016, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seasons = 1,
                            StillOngoing = false,
                            StudioId = new Guid("218784ff-aa54-4439-919f-f05fc3210d40"),
                            Title = "A Silent Voice",
                            WriterId = new Guid("77f46aac-1ba8-480a-9fac-e74c3aa30c01")
                        },
                        new
                        {
                            Id = new Guid("0331ffb2-96a8-4eaf-be34-1a4682c1313a"),
                            Episodes = 1,
                            GenreId = new Guid("4b399db3-66c9-47c0-bbe4-9938c9c38466"),
                            Rating = 5,
                            ReleaseDate = new DateTime(2016, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seasons = 1,
                            StillOngoing = false,
                            StudioId = new Guid("3d4e1626-e4e9-47ba-be0a-e261a50c7c90"),
                            Title = "Your Name",
                            WriterId = new Guid("9685aa54-aabf-4c6d-a1b1-bf5941034861")
                        });
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasMaxLength(100000)
                        .HasColumnType("int");

                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HairColor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsMainCharacter")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Weakness")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Weapon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43dcf69f-8d92-4a95-a38d-fdf28c45c981"),
                            AnimeId = new Guid("d9d68329-bb49-4075-850d-2da01083f6b5"),
                            FirstName = "Chihiro",
                            IsMainCharacter = false,
                            LastName = "Ogino",
                            Skill = "Being happy"
                        },
                        new
                        {
                            Id = new Guid("19822615-8e5a-40f6-b367-45facb75dae3"),
                            AnimeId = new Guid("d9d68329-bb49-4075-850d-2da01083f6b5"),
                            FirstName = "Haku",
                            IsMainCharacter = false,
                            Skill = "Turn into Dragon"
                        },
                        new
                        {
                            Id = new Guid("98e6230d-f65c-44f4-a135-8f19641abf90"),
                            AnimeId = new Guid("d9d68329-bb49-4075-850d-2da01083f6b5"),
                            FirstName = "No-Face",
                            IsMainCharacter = false,
                            Skill = "Making gold"
                        },
                        new
                        {
                            Id = new Guid("2a919956-af57-4f75-90b7-fb816991e5ad"),
                            AnimeId = new Guid("b1ef98c2-eac2-471f-9506-16e213138f64"),
                            FirstName = "Shoko",
                            IsMainCharacter = false,
                            LastName = "Nishimiya",
                            Skill = "Sign language"
                        },
                        new
                        {
                            Id = new Guid("853d6888-0fb3-4fa1-a4cd-5353d1a44561"),
                            AnimeId = new Guid("b1ef98c2-eac2-471f-9506-16e213138f64"),
                            FirstName = "Shoya",
                            IsMainCharacter = false,
                            LastName = "Ishida",
                            Skill = "Cute smile"
                        },
                        new
                        {
                            Id = new Guid("96ef8413-a427-42d1-9b63-b48ce3cb9491"),
                            AnimeId = new Guid("0331ffb2-96a8-4eaf-be34-1a4682c1313a"),
                            FirstName = "Mitsuha",
                            IsMainCharacter = false,
                            LastName = "Miyamizu",
                            Skill = "Get back in time"
                        },
                        new
                        {
                            Id = new Guid("115fb0a9-518c-4346-994c-f50852105731"),
                            AnimeId = new Guid("0331ffb2-96a8-4eaf-be34-1a4682c1313a"),
                            FirstName = "Taki",
                            IsMainCharacter = false,
                            LastName = "Tachibana",
                            Skill = "Get back in time"
                        });
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf17fef6-72a7-41fc-9a9b-5251123b02a0"),
                            Description = "Magical worlds and imaginative storytelling.",
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("d613b8c3-6023-4538-8727-9e01403b0a66"),
                            Description = "Emotionally intense and story-driven.",
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("4b399db3-66c9-47c0-bbe4-9938c9c38466"),
                            Description = "Love and relationships.",
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("76b77f95-a441-4dbd-aa52-1343936236eb"),
                            Description = "Exciting journeys and discoveries.",
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("c861e1a0-3a19-44b8-afc8-2eba56f9c700"),
                            Description = "Everyday life experiences.",
                            Name = "Slice of Life"
                        });
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Studio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateFounded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Studios");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22354271-34e8-42e8-bd32-640f8853d975"),
                            DateFounded = new DateTime(1985, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Studio Ghibli"
                        },
                        new
                        {
                            Id = new Guid("218784ff-aa54-4439-919f-f05fc3210d40"),
                            DateFounded = new DateTime(1981, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kyoto Animation"
                        },
                        new
                        {
                            Id = new Guid("3d4e1626-e4e9-47ba-be0a-e261a50c7c90"),
                            DateFounded = new DateTime(2007, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CoMix Wave Films"
                        },
                        new
                        {
                            Id = new Guid("af2dfa37-e909-4eb2-9d6b-556877691db2"),
                            DateFounded = new DateTime(1956, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Toho Animation"
                        },
                        new
                        {
                            Id = new Guid("b21bd6d0-c322-4322-b7f1-4e18a2c3b132"),
                            DateFounded = new DateTime(1972, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Madhouse"
                        });
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Writer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FavoriteGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HairColor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FavoriteGenreId");

                    b.ToTable("Writers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bcd3f42d-b7fb-4157-9f82-333f17f5d2ed"),
                            DateOfBirth = new DateTime(1941, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FavoriteGenreId = new Guid("bf17fef6-72a7-41fc-9a9b-5251123b02a0"),
                            FirstName = "Hayao",
                            LastName = "Miyazaki"
                        },
                        new
                        {
                            Id = new Guid("77f46aac-1ba8-480a-9fac-e74c3aa30c01"),
                            DateOfBirth = new DateTime(1981, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FavoriteGenreId = new Guid("bf17fef6-72a7-41fc-9a9b-5251123b02a0"),
                            FirstName = "Naoko",
                            LastName = "Yamada"
                        },
                        new
                        {
                            Id = new Guid("9685aa54-aabf-4c6d-a1b1-bf5941034861"),
                            DateOfBirth = new DateTime(1973, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FavoriteGenreId = new Guid("4b399db3-66c9-47c0-bbe4-9938c9c38466"),
                            FirstName = "Makoto",
                            LastName = "Shinkai"
                        });
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.Models.QuizzesUsers", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "QuizId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizzesUsers");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.QuizSystem.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a8a84a9-35da-4e5c-8a73-a36b1149e565"),
                            CreatedAt = new DateTime(2024, 11, 21, 19, 17, 14, 277, DateTimeKind.Local).AddTicks(5296),
                            CreatorId = new Guid("501b2641-10d8-473a-8053-dde0487f32e6"),
                            Description = "Test your knowledge about Spirited Away.",
                            Title = "Spirited Away Quiz"
                        },
                        new
                        {
                            Id = new Guid("b6ed8a74-be90-424c-b663-18829f5aaf28"),
                            CreatedAt = new DateTime(2024, 11, 21, 19, 17, 14, 277, DateTimeKind.Local).AddTicks(5351),
                            CreatorId = new Guid("3d412158-0be7-415e-86fc-e5a6745b5d81"),
                            Description = "Test your knowledge about A Silent Voice.",
                            Title = "A Silent Voice Quiz"
                        },
                        new
                        {
                            Id = new Guid("2415e303-6dbb-4f09-8f81-0ef085101d5f"),
                            CreatedAt = new DateTime(2024, 11, 21, 19, 17, 14, 277, DateTimeKind.Local).AddTicks(5359),
                            CreatorId = new Guid("cdef08bf-7968-4e48-8986-a38cbd4bd028"),
                            Description = "Test your knowledge about Your Name.",
                            Title = "Your Name Quiz"
                        });
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.QuizSystem.QuizOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("OptionText")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("QuizQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizQuestionId");

                    b.ToTable("QuizOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("245aecb5-b9a2-4bbf-9c96-6be57ad3842c"),
                            IsCorrect = true,
                            OptionText = "Chihiro Ogino",
                            QuizQuestionId = new Guid("eed7f69b-d4a5-4283-b798-5075888da2aa")
                        },
                        new
                        {
                            Id = new Guid("b6300004-e39d-4eb5-9758-ed1b65620d0a"),
                            IsCorrect = false,
                            OptionText = "Satsuki Kusakabe",
                            QuizQuestionId = new Guid("eed7f69b-d4a5-4283-b798-5075888da2aa")
                        },
                        new
                        {
                            Id = new Guid("b240e627-cb7f-44a8-867b-658dceb3a09f"),
                            IsCorrect = false,
                            OptionText = "Nausicaä",
                            QuizQuestionId = new Guid("eed7f69b-d4a5-4283-b798-5075888da2aa")
                        },
                        new
                        {
                            Id = new Guid("24d6706d-d4bd-4bc8-983d-537d569cd01c"),
                            IsCorrect = false,
                            OptionText = "Sophie Hatter",
                            QuizQuestionId = new Guid("eed7f69b-d4a5-4283-b798-5075888da2aa")
                        },
                        new
                        {
                            Id = new Guid("f403fdce-0946-42a8-aa3d-9ca8b7141e87"),
                            IsCorrect = true,
                            OptionText = "Yubaba",
                            QuizQuestionId = new Guid("d33b97ff-9280-4377-9c83-cd361abcfa57")
                        },
                        new
                        {
                            Id = new Guid("64432bbe-2135-43cb-93b9-032fea8c7748"),
                            IsCorrect = false,
                            OptionText = "Zeniba",
                            QuizQuestionId = new Guid("d33b97ff-9280-4377-9c83-cd361abcfa57")
                        },
                        new
                        {
                            Id = new Guid("097ec670-a099-465b-8e58-fede9343728c"),
                            IsCorrect = false,
                            OptionText = "Kamaji",
                            QuizQuestionId = new Guid("d33b97ff-9280-4377-9c83-cd361abcfa57")
                        },
                        new
                        {
                            Id = new Guid("7962a535-d683-4c81-9b6b-3100c2f5a2d7"),
                            IsCorrect = false,
                            OptionText = "Haku",
                            QuizQuestionId = new Guid("d33b97ff-9280-4377-9c83-cd361abcfa57")
                        },
                        new
                        {
                            Id = new Guid("b50a5ccd-17fb-494f-b600-38ab9ca960e0"),
                            IsCorrect = true,
                            OptionText = "Shoya Ishida",
                            QuizQuestionId = new Guid("b5d4b633-d6b3-4f7f-b2ac-225c187f45b1")
                        },
                        new
                        {
                            Id = new Guid("8033a842-348a-4301-93b1-b0bb20ccda8a"),
                            IsCorrect = false,
                            OptionText = "Shoko Nishimiya",
                            QuizQuestionId = new Guid("b5d4b633-d6b3-4f7f-b2ac-225c187f45b1")
                        },
                        new
                        {
                            Id = new Guid("7d5a2d4a-6c0b-4f87-869c-bab5fbd8ee4c"),
                            IsCorrect = false,
                            OptionText = "Mitsuha Miyamizu",
                            QuizQuestionId = new Guid("b5d4b633-d6b3-4f7f-b2ac-225c187f45b1")
                        },
                        new
                        {
                            Id = new Guid("131d2407-381d-4a67-a4be-02e6dae2b119"),
                            IsCorrect = false,
                            OptionText = "Taki Tachibana",
                            QuizQuestionId = new Guid("b5d4b633-d6b3-4f7f-b2ac-225c187f45b1")
                        },
                        new
                        {
                            Id = new Guid("98f2b3dd-6785-494c-80dd-899134476652"),
                            IsCorrect = true,
                            OptionText = "Mitsuha Miyamizu",
                            QuizQuestionId = new Guid("6ca2443b-008a-456b-ae28-6576bff2d8dc")
                        },
                        new
                        {
                            Id = new Guid("044127ec-193f-4cb5-a994-efd6f51e6c48"),
                            IsCorrect = true,
                            OptionText = "Taki Tachibana",
                            QuizQuestionId = new Guid("6ca2443b-008a-456b-ae28-6576bff2d8dc")
                        },
                        new
                        {
                            Id = new Guid("aacb4c0b-bf9d-4a35-904d-7cfe29c6428d"),
                            IsCorrect = false,
                            OptionText = "Shoya Ishida",
                            QuizQuestionId = new Guid("6ca2443b-008a-456b-ae28-6576bff2d8dc")
                        },
                        new
                        {
                            Id = new Guid("563bb9f1-28aa-48e2-913b-4e49637e2892"),
                            IsCorrect = false,
                            OptionText = "Chihiro Ogino",
                            QuizQuestionId = new Guid("6ca2443b-008a-456b-ae28-6576bff2d8dc")
                        });
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.QuizSystem.QuizQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuizType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eed7f69b-d4a5-4283-b798-5075888da2aa"),
                            QuizId = new Guid("4a8a84a9-35da-4e5c-8a73-a36b1149e565"),
                            QuizType = 1,
                            Title = "What is the name of the main protagonist in Spirited Away?"
                        },
                        new
                        {
                            Id = new Guid("d33b97ff-9280-4377-9c83-cd361abcfa57"),
                            QuizId = new Guid("4a8a84a9-35da-4e5c-8a73-a36b1149e565"),
                            QuizType = 1,
                            Title = "Who runs the bathhouse in Spirited Away?"
                        },
                        new
                        {
                            Id = new Guid("3961349f-35ed-4cfd-9420-b880c99a9cf4"),
                            Answer = "Her real name",
                            QuizId = new Guid("4a8a84a9-35da-4e5c-8a73-a36b1149e565"),
                            QuizType = 2,
                            Title = "What does Chihiro need to remember to return home?"
                        },
                        new
                        {
                            Id = new Guid("ab5a800a-f0aa-4ab5-9e39-e88c3d42cc83"),
                            Answer = "False",
                            QuizId = new Guid("4a8a84a9-35da-4e5c-8a73-a36b1149e565"),
                            QuizType = 0,
                            Title = "True or False: No-Face is a spirit who tries to eat Chihiro."
                        },
                        new
                        {
                            Id = new Guid("b5d4b633-d6b3-4f7f-b2ac-225c187f45b1"),
                            QuizId = new Guid("b6ed8a74-be90-424c-b663-18829f5aaf28"),
                            QuizType = 1,
                            Title = "What is the name of the main protagonist in A Silent Voice?"
                        },
                        new
                        {
                            Id = new Guid("197bc952-c537-4552-b034-7ebc3f8007fe"),
                            Answer = "True",
                            QuizId = new Guid("b6ed8a74-be90-424c-b663-18829f5aaf28"),
                            QuizType = 0,
                            Title = "True or False: Shoya Ishida is a former bully in A Silent Voice."
                        },
                        new
                        {
                            Id = new Guid("bee83cbd-697f-4a17-aa52-cc695fbb1e28"),
                            Answer = "Shoko Nishimiya",
                            QuizId = new Guid("b6ed8a74-be90-424c-b663-18829f5aaf28"),
                            QuizType = 2,
                            Title = "Who does Shoya Ishida try to make amends with?"
                        },
                        new
                        {
                            Id = new Guid("6ca2443b-008a-456b-ae28-6576bff2d8dc"),
                            QuizId = new Guid("2415e303-6dbb-4f09-8f81-0ef085101d5f"),
                            QuizType = 1,
                            Title = "What is the name of the main character in Your Name?"
                        },
                        new
                        {
                            Id = new Guid("827b6e6a-81fe-4490-8e49-629fedb5b5b1"),
                            Answer = "True",
                            QuizId = new Guid("2415e303-6dbb-4f09-8f81-0ef085101d5f"),
                            QuizType = 0,
                            Title = "True or False: Taki and Mitsuha swap bodies in Your Name."
                        });
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasMaxLength(120)
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("501b2641-10d8-473a-8053-dde0487f32e6"),
                            Age = 25,
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 21, 19, 17, 14, 277, DateTimeKind.Local).AddTicks(3808),
                            FirstName = "John",
                            Gender = 0,
                            IdentityUserId = "f48ba418-31fc-4cc4-adda-5d6ae18d4ffa",
                            IsDeleted = false,
                            LastModified = new DateTime(2024, 11, 21, 19, 17, 14, 277, DateTimeKind.Local).AddTicks(3810),
                            LastName = "Doe",
                            Points = 1200
                        },
                        new
                        {
                            Id = new Guid("cdef08bf-7968-4e48-8986-a38cbd4bd028"),
                            Age = 30,
                            Country = "Canada",
                            CreatedAt = new DateTime(2024, 11, 21, 19, 17, 14, 277, DateTimeKind.Local).AddTicks(3828),
                            FirstName = "Jane",
                            Gender = 1,
                            IdentityUserId = "f0394f41-3421-48a9-bd2d-ee3cf0f706a9",
                            IsDeleted = false,
                            LastModified = new DateTime(2024, 11, 21, 19, 17, 14, 277, DateTimeKind.Local).AddTicks(3830),
                            LastName = "Smith",
                            Points = 1500
                        },
                        new
                        {
                            Id = new Guid("3d412158-0be7-415e-86fc-e5a6745b5d81"),
                            Age = 22,
                            Country = "UK",
                            CreatedAt = new DateTime(2024, 11, 21, 19, 17, 14, 277, DateTimeKind.Local).AddTicks(3943),
                            FirstName = "Alex",
                            Gender = 2,
                            IdentityUserId = "6b07025f-873b-4b01-84ed-a1248c27fb2a",
                            IsDeleted = false,
                            LastModified = new DateTime(2024, 11, 21, 19, 17, 14, 277, DateTimeKind.Local).AddTicks(3945),
                            LastName = "Johnson",
                            Points = 800
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f48ba418-31fc-4cc4-adda-5d6ae18d4ffa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a593e0f4-551b-42c8-9b57-781307ee9294",
                            Email = "johndoe@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNDOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHNDOE",
                            PasswordHash = "AQAAAAIAAYagAAAAEDE1sUjqRt0OcnIFr2Gkt6MIxp78Ycfndk6Mjd5x4DmawQlrZG/rnto376IY2ObMlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fad93452-3a87-4309-8776-4d7907f65329",
                            TwoFactorEnabled = false,
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = "f0394f41-3421-48a9-bd2d-ee3cf0f706a9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4e33082-cd82-48a6-992d-60fa1537fa7b",
                            Email = "janesmith@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANESMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANESMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEJUcVHIIOEH72zPaiPAWQn8IZR2BX0QteQgu0rkZxhWElPQ3NO3fRQ87VuOGP1+aNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f18df274-5ba2-44c1-a1f9-ada8f4a7f563",
                            TwoFactorEnabled = false,
                            UserName = "janesmith"
                        },
                        new
                        {
                            Id = "6b07025f-873b-4b01-84ed-a1248c27fb2a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "224bf35b-ea89-43b0-8100-24c675d866ec",
                            Email = "alexjohnson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXJOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "ALEXJOHNSON",
                            PasswordHash = "AQAAAAIAAYagAAAAELHuEOVSAeXgGe6t7FZBDpHZNQ57qibYVLS5tmISUT5+7vytimWyvCTwRqkCpPEWYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "009818cc-0f87-4d96-98cc-31b2e57a1651",
                            TwoFactorEnabled = false,
                            UserName = "alexjohnson"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Anime", b =>
                {
                    b.HasOne("AnimeQSystem.Data.Models.AnimeSystem.Genre", "Genre")
                        .WithMany("Animes")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeQSystem.Data.Models.AnimeSystem.Studio", "Studio")
                        .WithMany("Animes")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeQSystem.Data.Models.AnimeSystem.Writer", "Writer")
                        .WithMany("AnimesWritten")
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Studio");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Character", b =>
                {
                    b.HasOne("AnimeQSystem.Data.Models.AnimeSystem.Anime", "Anime")
                        .WithMany("Characters")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Writer", b =>
                {
                    b.HasOne("AnimeQSystem.Data.Models.AnimeSystem.Genre", "FavoriteGenre")
                        .WithMany("Writers")
                        .HasForeignKey("FavoriteGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavoriteGenre");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.Models.QuizzesUsers", b =>
                {
                    b.HasOne("AnimeQSystem.Data.Models.QuizSystem.Quiz", "Quiz")
                        .WithMany("QuizUsers")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeQSystem.Data.Models.User", "User")
                        .WithMany("UserQuizzes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.QuizSystem.Quiz", b =>
                {
                    b.HasOne("AnimeQSystem.Data.Models.User", "Creator")
                        .WithMany("UserCreatedQuizzes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.QuizSystem.QuizOption", b =>
                {
                    b.HasOne("AnimeQSystem.Data.Models.QuizSystem.QuizQuestion", "QuizQuestion")
                        .WithMany("QuizOptions")
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizQuestion");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.QuizSystem.QuizQuestion", b =>
                {
                    b.HasOne("AnimeQSystem.Data.Models.QuizSystem.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.User", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithOne()
                        .HasForeignKey("AnimeQSystem.Data.Models.User", "IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Anime", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Genre", b =>
                {
                    b.Navigation("Animes");

                    b.Navigation("Writers");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Studio", b =>
                {
                    b.Navigation("Animes");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Writer", b =>
                {
                    b.Navigation("AnimesWritten");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.QuizSystem.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("QuizUsers");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.QuizSystem.QuizQuestion", b =>
                {
                    b.Navigation("QuizOptions");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.User", b =>
                {
                    b.Navigation("UserCreatedQuizzes");

                    b.Navigation("UserQuizzes");
                });
#pragma warning restore 612, 618
        }
    }
}
