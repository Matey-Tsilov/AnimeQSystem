// <auto-generated />
using System;
using AnimeQSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnimeQSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241120193143_SeedDatabase")]
    partial class SeedDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Anime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Episodes")
                        .HasColumnType("int");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Seasons")
                        .HasColumnType("int");

                    b.Property<bool>("StillOngoing")
                        .HasColumnType("bit");

                    b.Property<Guid>("StudioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("StudioId");

                    b.HasIndex("WriterId");

                    b.ToTable("Animes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("202e5a57-d1f0-4eeb-ba3d-cadb12c2f046"),
                            Episodes = 1,
                            GenreId = new Guid("6bedbbed-a33c-4734-8f09-7dcbf0e1c5a1"),
                            Rating = 5,
                            ReleaseDate = new DateTime(2001, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seasons = 1,
                            StillOngoing = false,
                            StudioId = new Guid("b722c905-7333-427c-9cb0-9665439a643f"),
                            Title = "Spirited Away",
                            WriterId = new Guid("329233eb-e5b9-4b35-95de-29e9fdcbfbf8")
                        },
                        new
                        {
                            Id = new Guid("d402c974-e9e4-46fb-b37e-2b98f5c11370"),
                            Episodes = 1,
                            GenreId = new Guid("da926f91-813c-429f-93ce-1a610fb18d2b"),
                            Rating = 4,
                            ReleaseDate = new DateTime(2016, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seasons = 1,
                            StillOngoing = false,
                            StudioId = new Guid("fa923d27-c1d3-46cd-927a-e779953f81a7"),
                            Title = "A Silent Voice",
                            WriterId = new Guid("811e559a-bdb9-4d09-98be-9e39a54f34c6")
                        },
                        new
                        {
                            Id = new Guid("f603ec70-750b-4104-a644-d6ac5bbc81c5"),
                            Episodes = 1,
                            GenreId = new Guid("eb26586b-2c5c-4779-886a-6f6152e6d4e4"),
                            Rating = 5,
                            ReleaseDate = new DateTime(2016, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Seasons = 1,
                            StillOngoing = false,
                            StudioId = new Guid("6daec29e-4f30-44d0-920c-1f050636edf4"),
                            Title = "Your Name",
                            WriterId = new Guid("eee1e809-b16b-44a9-a816-34bd6d56b0ec")
                        });
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasMaxLength(100000)
                        .HasColumnType("int");

                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HairColor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsMainCharacter")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Weakness")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Weapon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93fe7a4a-e5ca-44c3-a216-64e6c1770bd9"),
                            AnimeId = new Guid("202e5a57-d1f0-4eeb-ba3d-cadb12c2f046"),
                            FirstName = "Chihiro",
                            IsMainCharacter = false,
                            LastName = "Ogino",
                            Skill = "Being happy"
                        },
                        new
                        {
                            Id = new Guid("2af7c14c-fcad-437c-89ff-ee348d0eedcf"),
                            AnimeId = new Guid("202e5a57-d1f0-4eeb-ba3d-cadb12c2f046"),
                            FirstName = "Haku",
                            IsMainCharacter = false,
                            Skill = "Turn into Dragon"
                        },
                        new
                        {
                            Id = new Guid("4f777f86-0ad5-4563-b71f-b9bed5b9a38f"),
                            AnimeId = new Guid("202e5a57-d1f0-4eeb-ba3d-cadb12c2f046"),
                            FirstName = "No-Face",
                            IsMainCharacter = false,
                            Skill = "Making gold"
                        },
                        new
                        {
                            Id = new Guid("cfd97a38-cdd0-4a7b-bad8-2319145b8822"),
                            AnimeId = new Guid("d402c974-e9e4-46fb-b37e-2b98f5c11370"),
                            FirstName = "Shoko",
                            IsMainCharacter = false,
                            LastName = "Nishimiya",
                            Skill = "Sign language"
                        },
                        new
                        {
                            Id = new Guid("b6f3ac48-d9c4-49e6-a5f9-b168ed84edd8"),
                            AnimeId = new Guid("d402c974-e9e4-46fb-b37e-2b98f5c11370"),
                            FirstName = "Shoya",
                            IsMainCharacter = false,
                            LastName = "Ishida",
                            Skill = "Cute smile"
                        },
                        new
                        {
                            Id = new Guid("242fc014-ef5d-4ed9-83ff-c6e2be90b8b6"),
                            AnimeId = new Guid("f603ec70-750b-4104-a644-d6ac5bbc81c5"),
                            FirstName = "Mitsuha",
                            IsMainCharacter = false,
                            LastName = "Miyamizu",
                            Skill = "Get back in time"
                        },
                        new
                        {
                            Id = new Guid("6dd62844-c8ad-43ca-a2a7-6e1df26bdffa"),
                            AnimeId = new Guid("f603ec70-750b-4104-a644-d6ac5bbc81c5"),
                            FirstName = "Taki",
                            IsMainCharacter = false,
                            LastName = "Tachibana",
                            Skill = "Get back in time"
                        });
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6bedbbed-a33c-4734-8f09-7dcbf0e1c5a1"),
                            Description = "Magical worlds and imaginative storytelling.",
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("da926f91-813c-429f-93ce-1a610fb18d2b"),
                            Description = "Emotionally intense and story-driven.",
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("eb26586b-2c5c-4779-886a-6f6152e6d4e4"),
                            Description = "Love and relationships.",
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("e74499d6-6592-4c1c-a99e-0500c915c028"),
                            Description = "Exciting journeys and discoveries.",
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("430f3069-a397-461a-9dce-5cd9fd7ea516"),
                            Description = "Everyday life experiences.",
                            Name = "Slice of Life"
                        });
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Studio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateFounded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Studios");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b722c905-7333-427c-9cb0-9665439a643f"),
                            DateFounded = new DateTime(1985, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Studio Ghibli"
                        },
                        new
                        {
                            Id = new Guid("fa923d27-c1d3-46cd-927a-e779953f81a7"),
                            DateFounded = new DateTime(1981, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kyoto Animation"
                        },
                        new
                        {
                            Id = new Guid("6daec29e-4f30-44d0-920c-1f050636edf4"),
                            DateFounded = new DateTime(2007, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CoMix Wave Films"
                        },
                        new
                        {
                            Id = new Guid("42c9bc6c-6fbe-4fc0-9143-438047eee4e6"),
                            DateFounded = new DateTime(1956, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Toho Animation"
                        },
                        new
                        {
                            Id = new Guid("710fbaa2-690e-4331-9a34-8841dfe80dcf"),
                            DateFounded = new DateTime(1972, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Madhouse"
                        });
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Writer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FavoriteGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HairColor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FavoriteGenreId");

                    b.ToTable("Writers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("329233eb-e5b9-4b35-95de-29e9fdcbfbf8"),
                            DateOfBirth = new DateTime(1941, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FavoriteGenreId = new Guid("6bedbbed-a33c-4734-8f09-7dcbf0e1c5a1"),
                            FirstName = "Hayao",
                            LastName = "Miyazaki"
                        },
                        new
                        {
                            Id = new Guid("811e559a-bdb9-4d09-98be-9e39a54f34c6"),
                            DateOfBirth = new DateTime(1981, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FavoriteGenreId = new Guid("6bedbbed-a33c-4734-8f09-7dcbf0e1c5a1"),
                            FirstName = "Naoko",
                            LastName = "Yamada"
                        },
                        new
                        {
                            Id = new Guid("eee1e809-b16b-44a9-a816-34bd6d56b0ec"),
                            DateOfBirth = new DateTime(1973, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FavoriteGenreId = new Guid("eb26586b-2c5c-4779-886a-6f6152e6d4e4"),
                            FirstName = "Makoto",
                            LastName = "Shinkai"
                        });
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.Models.QuizzesUsers", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "QuizId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizzesUsers");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.QuizSystem.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d44ccc0-3135-4b04-91cc-ac7bed491e6d"),
                            CreatedAt = new DateTime(2024, 11, 20, 21, 31, 43, 131, DateTimeKind.Local).AddTicks(6524),
                            CreatorId = new Guid("f17ce454-1360-4689-8e5f-9814b0c7a0b1"),
                            Description = "Test your knowledge about Spirited Away.",
                            Title = "Spirited Away Quiz"
                        },
                        new
                        {
                            Id = new Guid("5e201ab6-f741-4a27-a323-d301d4beacf8"),
                            CreatedAt = new DateTime(2024, 11, 20, 21, 31, 43, 131, DateTimeKind.Local).AddTicks(6556),
                            CreatorId = new Guid("8d8261e0-c672-41c8-b31e-940f838b9c19"),
                            Description = "Test your knowledge about A Silent Voice.",
                            Title = "A Silent Voice Quiz"
                        },
                        new
                        {
                            Id = new Guid("6b398fe4-6ef4-442d-87f1-de79ceedc93e"),
                            CreatedAt = new DateTime(2024, 11, 20, 21, 31, 43, 131, DateTimeKind.Local).AddTicks(6561),
                            CreatorId = new Guid("bfd1a97f-8330-46c9-9905-bf885a3f76c9"),
                            Description = "Test your knowledge about Your Name.",
                            Title = "Your Name Quiz"
                        });
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.QuizSystem.QuizOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("OptionText")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("QuizQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizQuestionId");

                    b.ToTable("QuizOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36d19cf4-281b-43ca-93af-45d6a9984005"),
                            IsCorrect = true,
                            OptionText = "Chihiro Ogino",
                            QuizQuestionId = new Guid("67cb3af6-fc59-4cd2-9795-14a0e9983c10")
                        },
                        new
                        {
                            Id = new Guid("43ccdfb9-7910-4494-8e6f-9c426d4a67b0"),
                            IsCorrect = false,
                            OptionText = "Satsuki Kusakabe",
                            QuizQuestionId = new Guid("67cb3af6-fc59-4cd2-9795-14a0e9983c10")
                        },
                        new
                        {
                            Id = new Guid("afd5b5fa-6e8f-4840-a1f7-d08b2ec43e3e"),
                            IsCorrect = false,
                            OptionText = "Nausicaä",
                            QuizQuestionId = new Guid("67cb3af6-fc59-4cd2-9795-14a0e9983c10")
                        },
                        new
                        {
                            Id = new Guid("e6d09574-5752-4646-a8e6-7d1235e8287a"),
                            IsCorrect = false,
                            OptionText = "Sophie Hatter",
                            QuizQuestionId = new Guid("67cb3af6-fc59-4cd2-9795-14a0e9983c10")
                        },
                        new
                        {
                            Id = new Guid("b3e80635-a50f-43f2-927b-9d0f418fd9a3"),
                            IsCorrect = true,
                            OptionText = "Yubaba",
                            QuizQuestionId = new Guid("5b637830-a893-43c5-8cd1-3416317050e7")
                        },
                        new
                        {
                            Id = new Guid("bef8ab3a-a97c-4304-9b20-0001fc8c35b8"),
                            IsCorrect = false,
                            OptionText = "Zeniba",
                            QuizQuestionId = new Guid("5b637830-a893-43c5-8cd1-3416317050e7")
                        },
                        new
                        {
                            Id = new Guid("2b91d97f-9267-42d3-8cd2-ff5947683d89"),
                            IsCorrect = false,
                            OptionText = "Kamaji",
                            QuizQuestionId = new Guid("5b637830-a893-43c5-8cd1-3416317050e7")
                        },
                        new
                        {
                            Id = new Guid("1a936afb-0f81-4eac-9894-da6e4a2f347e"),
                            IsCorrect = false,
                            OptionText = "Haku",
                            QuizQuestionId = new Guid("5b637830-a893-43c5-8cd1-3416317050e7")
                        },
                        new
                        {
                            Id = new Guid("040c14ad-807d-4ce0-81aa-d247161e9ffb"),
                            IsCorrect = true,
                            OptionText = "Shoya Ishida",
                            QuizQuestionId = new Guid("04b48086-084f-4a1e-af06-2fb7d84a2bae")
                        },
                        new
                        {
                            Id = new Guid("7d8e13dd-72dd-4014-80d3-a3f43c5236e5"),
                            IsCorrect = false,
                            OptionText = "Shoko Nishimiya",
                            QuizQuestionId = new Guid("04b48086-084f-4a1e-af06-2fb7d84a2bae")
                        },
                        new
                        {
                            Id = new Guid("690788bc-151f-4e13-9e7e-d88a139af425"),
                            IsCorrect = false,
                            OptionText = "Mitsuha Miyamizu",
                            QuizQuestionId = new Guid("04b48086-084f-4a1e-af06-2fb7d84a2bae")
                        },
                        new
                        {
                            Id = new Guid("732f203f-0a41-4fe1-9850-cfe28d1855d3"),
                            IsCorrect = false,
                            OptionText = "Taki Tachibana",
                            QuizQuestionId = new Guid("04b48086-084f-4a1e-af06-2fb7d84a2bae")
                        },
                        new
                        {
                            Id = new Guid("d4975182-0427-488f-9fc4-2bd5b7eceda3"),
                            IsCorrect = true,
                            OptionText = "Mitsuha Miyamizu",
                            QuizQuestionId = new Guid("3248796b-1137-41bc-b3a8-9365073bbd52")
                        },
                        new
                        {
                            Id = new Guid("2ccf121c-ef2a-4fd7-b7ff-ce9be2df2355"),
                            IsCorrect = true,
                            OptionText = "Taki Tachibana",
                            QuizQuestionId = new Guid("3248796b-1137-41bc-b3a8-9365073bbd52")
                        },
                        new
                        {
                            Id = new Guid("03571285-7761-4bb9-abbe-e0d2fdb2d290"),
                            IsCorrect = false,
                            OptionText = "Shoya Ishida",
                            QuizQuestionId = new Guid("3248796b-1137-41bc-b3a8-9365073bbd52")
                        },
                        new
                        {
                            Id = new Guid("3ff05e53-8380-43e2-8a3f-8141cbea4186"),
                            IsCorrect = false,
                            OptionText = "Chihiro Ogino",
                            QuizQuestionId = new Guid("3248796b-1137-41bc-b3a8-9365073bbd52")
                        });
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.QuizSystem.QuizQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuizType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67cb3af6-fc59-4cd2-9795-14a0e9983c10"),
                            QuizId = new Guid("7d44ccc0-3135-4b04-91cc-ac7bed491e6d"),
                            QuizType = 1,
                            Title = "What is the name of the main protagonist in Spirited Away?"
                        },
                        new
                        {
                            Id = new Guid("5b637830-a893-43c5-8cd1-3416317050e7"),
                            QuizId = new Guid("7d44ccc0-3135-4b04-91cc-ac7bed491e6d"),
                            QuizType = 1,
                            Title = "Who runs the bathhouse in Spirited Away?"
                        },
                        new
                        {
                            Id = new Guid("ea3bd8e0-96e6-410a-a13a-bffa23f4ba43"),
                            Answer = "Her real name",
                            QuizId = new Guid("7d44ccc0-3135-4b04-91cc-ac7bed491e6d"),
                            QuizType = 2,
                            Title = "What does Chihiro need to remember to return home?"
                        },
                        new
                        {
                            Id = new Guid("e80e95e7-d4cd-4cdf-b75d-cdcb20ddb1ef"),
                            Answer = "False",
                            QuizId = new Guid("7d44ccc0-3135-4b04-91cc-ac7bed491e6d"),
                            QuizType = 0,
                            Title = "True or False: No-Face is a spirit who tries to eat Chihiro."
                        },
                        new
                        {
                            Id = new Guid("04b48086-084f-4a1e-af06-2fb7d84a2bae"),
                            QuizId = new Guid("5e201ab6-f741-4a27-a323-d301d4beacf8"),
                            QuizType = 1,
                            Title = "What is the name of the main protagonist in A Silent Voice?"
                        },
                        new
                        {
                            Id = new Guid("50d6b8ef-2ee2-4930-906b-4be181d6ccec"),
                            Answer = "True",
                            QuizId = new Guid("5e201ab6-f741-4a27-a323-d301d4beacf8"),
                            QuizType = 0,
                            Title = "True or False: Shoya Ishida is a former bully in A Silent Voice."
                        },
                        new
                        {
                            Id = new Guid("7a9c3e97-6b5d-41be-ac92-c6079962f6e9"),
                            Answer = "Shoko Nishimiya",
                            QuizId = new Guid("5e201ab6-f741-4a27-a323-d301d4beacf8"),
                            QuizType = 2,
                            Title = "Who does Shoya Ishida try to make amends with?"
                        },
                        new
                        {
                            Id = new Guid("3248796b-1137-41bc-b3a8-9365073bbd52"),
                            QuizId = new Guid("6b398fe4-6ef4-442d-87f1-de79ceedc93e"),
                            QuizType = 1,
                            Title = "What is the name of the main character in Your Name?"
                        },
                        new
                        {
                            Id = new Guid("428cdcfb-2d29-4e20-9160-d091ad892e6c"),
                            Answer = "True",
                            QuizId = new Guid("6b398fe4-6ef4-442d-87f1-de79ceedc93e"),
                            QuizType = 0,
                            Title = "True or False: Taki and Mitsuha swap bodies in Your Name."
                        });
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasMaxLength(120)
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f17ce454-1360-4689-8e5f-9814b0c7a0b1"),
                            Age = 25,
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 20, 21, 31, 43, 131, DateTimeKind.Local).AddTicks(4755),
                            FirstName = "John",
                            Gender = 0,
                            IdentityUserId = "3157c049-679e-41ba-9269-118d671346b1",
                            IsDeleted = false,
                            LastModified = new DateTime(2024, 11, 20, 21, 31, 43, 131, DateTimeKind.Local).AddTicks(4757),
                            LastName = "Doe",
                            Points = 1200
                        },
                        new
                        {
                            Id = new Guid("bfd1a97f-8330-46c9-9905-bf885a3f76c9"),
                            Age = 30,
                            Country = "Canada",
                            CreatedAt = new DateTime(2024, 11, 20, 21, 31, 43, 131, DateTimeKind.Local).AddTicks(4775),
                            FirstName = "Jane",
                            Gender = 1,
                            IdentityUserId = "d64e070a-7acd-4290-8f30-a1ad13d465b0",
                            IsDeleted = false,
                            LastModified = new DateTime(2024, 11, 20, 21, 31, 43, 131, DateTimeKind.Local).AddTicks(4777),
                            LastName = "Smith",
                            Points = 1500
                        },
                        new
                        {
                            Id = new Guid("8d8261e0-c672-41c8-b31e-940f838b9c19"),
                            Age = 22,
                            Country = "UK",
                            CreatedAt = new DateTime(2024, 11, 20, 21, 31, 43, 131, DateTimeKind.Local).AddTicks(4794),
                            FirstName = "Alex",
                            Gender = 2,
                            IdentityUserId = "afea43d5-db77-40d6-bd23-3d3577c529ee",
                            IsDeleted = false,
                            LastModified = new DateTime(2024, 11, 20, 21, 31, 43, 131, DateTimeKind.Local).AddTicks(4796),
                            LastName = "Johnson",
                            Points = 800
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3157c049-679e-41ba-9269-118d671346b1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5daf15e6-291b-46dd-9526-7d6259719492",
                            Email = "johndoe@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNDOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHNDOE",
                            PasswordHash = "AQAAAAIAAYagAAAAEHrJQDTRi1pkqrnAWT5JfOvW1ZVeedEci4G+OZe5+CK+QcXk3//Vkks65LFk8YFVIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "faa2833b-4170-4786-b563-ffd473c1a363",
                            TwoFactorEnabled = false,
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = "d64e070a-7acd-4290-8f30-a1ad13d465b0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc491f98-8dbd-43be-871a-621c0f48d18d",
                            Email = "janesmith@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANESMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANESMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEHrJQDTRi1pkqrnAWT5JfOvW1ZVeedEci4G+OZe5+CK+QcXk3//Vkks65LFk8YFVIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a700e63c-9370-4189-88e5-9af8a836b34e",
                            TwoFactorEnabled = false,
                            UserName = "janesmith"
                        },
                        new
                        {
                            Id = "afea43d5-db77-40d6-bd23-3d3577c529ee",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfe24bbc-c574-4e3a-a435-2de8cbd7868f",
                            Email = "alexjohnson@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXJOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "ALEXJOHNSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEHrJQDTRi1pkqrnAWT5JfOvW1ZVeedEci4G+OZe5+CK+QcXk3//Vkks65LFk8YFVIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3f20eef-2e85-4d5d-b682-fa6c0285efa7",
                            TwoFactorEnabled = false,
                            UserName = "alexjohnson"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Anime", b =>
                {
                    b.HasOne("AnimeQSystem.Data.Models.AnimeSystem.Genre", "Genre")
                        .WithMany("Animes")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeQSystem.Data.Models.AnimeSystem.Studio", "Studio")
                        .WithMany("Animes")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeQSystem.Data.Models.AnimeSystem.Writer", "Writer")
                        .WithMany("AnimesWritten")
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Studio");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Character", b =>
                {
                    b.HasOne("AnimeQSystem.Data.Models.AnimeSystem.Anime", "Anime")
                        .WithMany("Characters")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Writer", b =>
                {
                    b.HasOne("AnimeQSystem.Data.Models.AnimeSystem.Genre", "FavoriteGenre")
                        .WithMany("Writers")
                        .HasForeignKey("FavoriteGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavoriteGenre");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.Models.QuizzesUsers", b =>
                {
                    b.HasOne("AnimeQSystem.Data.Models.QuizSystem.Quiz", "Quiz")
                        .WithMany("QuizUsers")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeQSystem.Data.Models.User", "User")
                        .WithMany("UserQuizzes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.QuizSystem.Quiz", b =>
                {
                    b.HasOne("AnimeQSystem.Data.Models.User", "Creator")
                        .WithMany("UserCreatedQuizzes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.QuizSystem.QuizOption", b =>
                {
                    b.HasOne("AnimeQSystem.Data.Models.QuizSystem.QuizQuestion", "QuizQuestion")
                        .WithMany("QuizOptions")
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizQuestion");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.QuizSystem.QuizQuestion", b =>
                {
                    b.HasOne("AnimeQSystem.Data.Models.QuizSystem.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.User", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithOne()
                        .HasForeignKey("AnimeQSystem.Data.Models.User", "IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Anime", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Genre", b =>
                {
                    b.Navigation("Animes");

                    b.Navigation("Writers");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Studio", b =>
                {
                    b.Navigation("Animes");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.AnimeSystem.Writer", b =>
                {
                    b.Navigation("AnimesWritten");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.QuizSystem.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("QuizUsers");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.QuizSystem.QuizQuestion", b =>
                {
                    b.Navigation("QuizOptions");
                });

            modelBuilder.Entity("AnimeQSystem.Data.Models.User", b =>
                {
                    b.Navigation("UserCreatedQuizzes");

                    b.Navigation("UserQuizzes");
                });
#pragma warning restore 612, 618
        }
    }
}
